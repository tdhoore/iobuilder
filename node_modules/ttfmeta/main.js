"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.promise = exports.ttfInfo = exports.view = exports.result = void 0;
const meta_js_1 = __importDefault(require("./meta.js"));
const TABLE_COUNT_OFFSET = 4, TABLE_HEAD_OFFSET = 12, TABLE_HEAD_SIZE = 16, TAG_OFFSET = 0, TAG_SIZE = 4, CHECKSUM_OFFSET = TAG_OFFSET + TAG_SIZE, CHECKSUM_SIZE = 4, CONTENTS_PTR_OFFSET = CHECKSUM_OFFSET + CHECKSUM_SIZE, CONTENTS_PTR_SIZE = 4, LENGTH_OFFSET = TABLE_HEAD_SIZE + CONTENTS_PTR_OFFSET;
function offsetCount(data) {
    return u16(data, TABLE_COUNT_OFFSET);
}
function offsetContent(data, name) {
    return offsetData(data, name).contents;
}
function offsetData(data, name) {
    var numTables = offsetCount(data);
    var header = {
        tag: '',
        checksum: '',
        contents: '',
        length: ''
    };
    for (var i = 0; i < numTables; ++i) {
        var o = TABLE_HEAD_OFFSET + i * TABLE_HEAD_SIZE;
        var tag = utf8(data.buffer.slice(o, o + CONTENTS_PTR_SIZE));
        if (tag === name) {
            header.tag = tag,
                header.checksum = u32(data, o + CHECKSUM_OFFSET),
                header.contents = u32(data, o + CONTENTS_PTR_OFFSET),
                header.length = u32(data, o + LENGTH_OFFSET);
            return header;
        }
    }
    return header;
}
function name(data) {
    var ntOffset = offsetContent(data, 'name'), offsetStorage = u16(data, ntOffset + 4), numberNameRecords = u16(data, ntOffset + 2);
    var storage = offsetStorage + ntOffset;
    var info = {};
    for (var j = 0; j < numberNameRecords; j++) {
        var o = ntOffset + 6 + j * 12;
        var nameId = u16(data, o + 6);
        var stringLength = u16(data, o + 8);
        var stringOffset = u16(data, o + 10);
        if (!info.hasOwnProperty(nameId)) {
            info[nameId] = utf8(data.buffer.slice(storage + stringOffset, storage + stringOffset + stringLength));
        }
    }
    return info;
}
const VERSION_OFFSET = 0, WEIGHT_CLASS_OFFSET = 4;
function os2(data) {
    var o = offsetContent(data, 'OS/2');
    return {
        version: u16(data, o + VERSION_OFFSET),
        weightClass: u16(data, o + WEIGHT_CLASS_OFFSET)
    };
}
const FORMAT_OFFSET = 0, ITALIC_ANGLE_OFFSET = FORMAT_OFFSET + 4, UNDERLINE_POSITION_OFFSET = ITALIC_ANGLE_OFFSET + 8, UNDERLINE_THICKNESS_OFFSET = UNDERLINE_POSITION_OFFSET + 2, IS_FIXED_PITCH_OFFSET = UNDERLINE_THICKNESS_OFFSET + 2;
exports.result = {
    meta: {
        property: [],
        description: [],
        license: [],
        reference: []
    },
    tables: {
        name: {},
        post: {},
        os2: {
            version: '', weightClass: ''
        }
    }
};
function f32(fixed) {
    if (fixed & 0x80000000) {
        fixed = -(~fixed + 1);
    }
    return fixed / 65536;
}
function i16(data, pos) {
    return data.getInt16(pos);
}
function u16(data, pos) {
    return data.getUint16(pos);
}
function u32(data, pos) {
    return data.getUint32(pos);
}
function utf8(str) {
    return new TextDecoder("utf-8").decode(new Uint8Array(str));
}
function post(data) {
    var o = offsetContent(data, 'post');
    return {
        format: f32(u32(data, o + FORMAT_OFFSET)),
        italicAngle: f32(u32(data, o + ITALIC_ANGLE_OFFSET)),
        underlinePosition: i16(data, o + UNDERLINE_POSITION_OFFSET),
        underlineThickness: i16(data, o + UNDERLINE_THICKNESS_OFFSET),
        isFixedPitch: u32(data, o + IS_FIXED_PITCH_OFFSET),
        minMemType42: u32(data, o + 7),
        maxMemType42: u32(data, o + 9),
        minMemType1: u32(data, o + 11),
        maxMemType1: u32(data, o + 13)
    };
}
function resultTables(data) {
    exports.result.tables.name = name(data);
    exports.result.tables.post = post(data);
    exports.result.tables.os2 = os2(data);
    exports.result.meta = (0, meta_js_1.default)(exports.result.tables.name);
    return exports.result;
}
function view(data) {
    return new DataView(data.buffer, 0, data.byteLength);
}
exports.view = view;
function ttfInfo(data, callback) {
    try {
        resultTables(data);
        callback(null, exports.result);
    }
    catch (error) {
        callback(error.message || error.toString());
    }
}
exports.ttfInfo = ttfInfo;
function promise(pathOrData) {
    return new Promise(function (res, rej) {
        ttfInfo(pathOrData, function (e, d) {
            if (d) {
                res(d);
            }
            else {
                rej(e);
            }
        });
    });
}
exports.promise = promise;
